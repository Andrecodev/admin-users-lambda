const { VERIFY_USER, CONSULT_USER, PASSWORD_RECOVERY, CONSULT_PER_USER,CHANGE_STATUS_USER_LDAP, DELETE_USER_LDAP , CREATE_USER_LDAP, UPDATE_USER_LDAP,CREATE_USER_IAXIS} = require("../constants/soapOrchestrator");
const { VALIDAR_EXISTENCIA_USUARIO_LDAP, CONSULTAR_USUARIO,CONSULTAR_USUARIOS, RECOVER_PWD_LDAP,CHANGE_STATUS_USER_LDAP_DATA ,DELETE_USER_LDAP_DATA, CREATE_USER_LDAP_DATA,CREATE_USER_IAXIS_DATA} = require("./LDAPMock");
const { OK_RESPONSE_TEMPLATE } = require("../models/response-templates");
const { CHILDREN_KEYS_PER_USER } = require("./commercialNetworkMock");
const { EXISTENT_BROKER } = require("./brokerMock");

const lambdaMock = (lambdaName) => {
  const response = {
    "query_interm": EXISTENT_BROKER,
    [VERIFY_USER]: VALIDAR_EXISTENCIA_USUARIO_LDAP,
    [CONSULT_USER]: CONSULTAR_USUARIO,
    [PASSWORD_RECOVERY]: RECOVER_PWD_LDAP,

    [CONSULT_PER_USER]: CHILDREN_KEYS_PER_USER,
    [CHANGE_STATUS_USER_LDAP]:CHANGE_STATUS_USER_LDAP_DATA,
    [DELETE_USER_LDAP]:DELETE_USER_LDAP_DATA,
    [CREATE_USER_LDAP]:CREATE_USER_LDAP_DATA,
    [UPDATE_USER_LDAP]:CREATE_USER_LDAP_DATA,
    [CREATE_USER_IAXIS]:CREATE_USER_IAXIS_DATA
    
    


  };

  return response[lambdaName] || OK_RESPONSE_TEMPLATE;
};

module.exports = {
  lambdaMock,
};
