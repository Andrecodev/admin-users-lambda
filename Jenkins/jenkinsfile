@Library('utils@master') _

def envDeployment = "prod"
def MAJOR_VERSION = "1"
def ARTIFACT_VERSION = "${MAJOR_VERSION}.${BUILD_NUMBER}"
def ZIP_ARTIFACT = "ms-oficina-linea-${envDeployment}-admin-users.zip"
def ZIP_NAME = "lambda-${ZIP_ARTIFACT}"
def APP_NAME = "intl-co-ms-oficina-linea-admin-users"

pipeline {
	options {
		ansiColor('gnome-terminal')
	}

	agent {
		node {
			label 'linux'
		}
	}

	stages {

		stage('Prepare Stage') {
			steps {
				sh 'npm --version'
				sh 'sls --version'
				sh 'aws --version'
			}
		}

		stage('Clone Repo') {
			steps {
				checkout scm
			}
		}

		stage('Install Prod Dependencies') {
			steps {
				sh 'npm install --only=prod'
			}
		}

		stage('Create Package Folder') {
			steps {
				sh 'mkdir dist && mv node_modules/ dist/'
			}
		}

		stage('Install Dependencies') {
			steps {
				sh 'npm install'
			}
		}

		stage('Unit Test & Coverage') {
			steps {
				sh 'npm run test'
			}
		}

		stage('Package Project') {
			steps {
				sh 'npm run build-npm'
			}
		}

		stage('SonarQube Analysis') {
			steps {
				withSonarQubeEnv('sonarqube') {
					sh 'node_modules/sonar-scanner/bin/sonar-scanner -X -Dproject.settings=Jenkins/Liberty/sonar-project.properties -Dsonar.projectVersion=' + ARTIFACT_VERSION + ' '
				}
				sleep(time:5,unit:"SECONDS")
			}
		}

		stage('Quality Gate Analysis') {
			steps {
				timeout(time: 1, unit: 'MINUTES') {
					script  {
						def qg = waitForQualityGate()
						if (qg.status != 'OK') {
							error "Pipeline aborted due to quality gate failure: ${qg.status}"
						}
					}
				}
			}
		}

		stage('Zip Files') {
			steps {
				script {
				    zip dir: 'dist', glob: '', zipFile: "${ZIP_NAME}"
				}
			}
        }

		stage('Zip Files && Artifactory upload') {
			steps {
				script {

					zip dir: '', 
						glob: "${ZIP_NAME}, serverless.yml, Jenkins/cloudwatch.yml, Jenkins/custom-property-${envDeployment}.yml, Jenkins/iam-role.yml, Jenkins/lambda-function.yml, Jenkins/Liberty/${envDeployment}_jenkinsfile, Jenkins/Liberty/sonar-project.properties", 
						zipFile: "${ZIP_ARTIFACT}"
					
					def artifacts = [ZIP_ARTIFACT]
					
					artifactoryUploadFiles files:artifacts,version:ARTIFACT_VERSION,packageType:'npm',appName:APP_NAME
				}
			}
        }

		stage('Artifactory Promoted to Prod') {
			steps {
				promoteToProd(
					email:'andres.gallardo@libertycolombia.com',
					promoteArtifact: true,
					appName:APP_NAME,
					packageType:'npm',
					version: ARTIFACT_VERSION,
					singleJenkinsfilePattern: true
				){}
			}
		}
    }

	post {
		success {
			mail to: 'b6a2086a.LibertyMutual.onmicrosoft.com@amer.teams.ms', from: 'noreply-cdp@libertymutual.com',
                subject: "Prod MicroService Admin Users Deployment Promote to Prod: ${currentBuild.fullDisplayName} ", 
				body: "Cordial saludo, \n\n se adjunta los resultados obtenidos del job: ${env.JOB_BASE_NAME} \n - Status: Succeed Pipeline \n - Build url Job: ${env.BUILD_URL} \n - Build No ${env.BUILD_ID} "
		}

		failure {
			mail to: 'b6a2086a.LibertyMutual.onmicrosoft.com@amer.teams.ms', from: 'noreply-cdp@libertymutual.com',
                subject: "Prod MicroService Admin Users Deployment Promote to Prod: ${currentBuild.fullDisplayName} ", 
				body: "Cordial saludo, \n\n se adjunta los resultados obtenidos del job: ${env.JOB_BASE_NAME} \n - Status: Failed Pipeline \n - Build url Job: ${env.BUILD_URL} \n - Build No ${env.BUILD_ID} "
		}

		unstable {
			mail to: 'b6a2086a.LibertyMutual.onmicrosoft.com@amer.teams.ms', from: 'noreply-cdp@libertymutual.com',
                subject: "Prod MicroService Admin Users Deployment Promote to Prod: ${currentBuild.fullDisplayName} ", 
				body: "Cordial saludo, \n\n se adjunta los resultados obtenidos del job: ${env.JOB_BASE_NAME} \n - Status: Unstabled Pipeline \n - Build url Job: ${env.BUILD_URL} \n - Build No ${env.BUILD_ID} "
		}
	}
}